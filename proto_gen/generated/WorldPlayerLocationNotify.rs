// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `WorldPlayerLocationNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.Vector)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vector {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.Vector.x)
    pub x: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.Vector.y)
    pub y: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.Vector.z)
    pub z: f32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.Vector.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vector {
    fn default() -> &'a Vector {
        <Vector as ::protobuf::Message>::default_instance()
    }
}

impl Vector {
    pub fn new() -> Vector {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vector| { &m.x },
            |m: &mut Vector| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vector| { &m.y },
            |m: &mut Vector| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Vector| { &m.z },
            |m: &mut Vector| { &mut m.z },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vector>(
            "Vector",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vector {
    const NAME: &'static str = "Vector";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                29 => {
                    self.z = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        if self.z != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.z != 0. {
            os.write_float(3, self.z)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vector {
        Vector::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vector {
        static instance: Vector = Vector {
            x: 0.,
            y: 0.,
            z: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vector {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vector").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.PlayerLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerLocation {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerLocation.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerLocation.rot)
    pub rot: ::protobuf::MessageField<Vector>,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerLocation.pos)
    pub pos: ::protobuf::MessageField<Vector>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.PlayerLocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerLocation {
    fn default() -> &'a PlayerLocation {
        <PlayerLocation as ::protobuf::Message>::default_instance()
    }
}

impl PlayerLocation {
    pub fn new() -> PlayerLocation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &PlayerLocation| { &m.uid },
            |m: &mut PlayerLocation| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "rot",
            |m: &PlayerLocation| { &m.rot },
            |m: &mut PlayerLocation| { &mut m.rot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "pos",
            |m: &PlayerLocation| { &m.pos },
            |m: &mut PlayerLocation| { &mut m.pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerLocation>(
            "PlayerLocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerLocation {
    const NAME: &'static str = "PlayerLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.uid = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rot)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.uid);
        }
        if let Some(v) = self.rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(14, self.uid)?;
        }
        if let Some(v) = self.rot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerLocation {
        PlayerLocation::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.rot.clear();
        self.pos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerLocation {
        static instance: PlayerLocation = PlayerLocation {
            uid: 0,
            rot: ::protobuf::MessageField::none(),
            pos: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerLocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerLocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerLocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.WorldPlayerLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WorldPlayerLocation {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.WorldPlayerLocation.scene)
    pub scene: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.WorldPlayerLocation.loc)
    pub loc: ::protobuf::MessageField<PlayerLocation>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.WorldPlayerLocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldPlayerLocation {
    fn default() -> &'a WorldPlayerLocation {
        <WorldPlayerLocation as ::protobuf::Message>::default_instance()
    }
}

impl WorldPlayerLocation {
    pub fn new() -> WorldPlayerLocation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene",
            |m: &WorldPlayerLocation| { &m.scene },
            |m: &mut WorldPlayerLocation| { &mut m.scene },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PlayerLocation>(
            "loc",
            |m: &WorldPlayerLocation| { &m.loc },
            |m: &mut WorldPlayerLocation| { &mut m.loc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldPlayerLocation>(
            "WorldPlayerLocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldPlayerLocation {
    const NAME: &'static str = "WorldPlayerLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.scene = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.loc)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.scene != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.scene);
        }
        if let Some(v) = self.loc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.scene != 0 {
            os.write_uint32(13, self.scene)?;
        }
        if let Some(v) = self.loc.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldPlayerLocation {
        WorldPlayerLocation::new()
    }

    fn clear(&mut self) {
        self.scene = 0;
        self.loc.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldPlayerLocation {
        static instance: WorldPlayerLocation = WorldPlayerLocation {
            scene: 0,
            loc: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldPlayerLocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldPlayerLocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldPlayerLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldPlayerLocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.PosRepeat)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PosRepeat {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.rot)
    pub rot: ::protobuf::MessageField<Vector>,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.idk1)
    pub idk1: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.idk2)
    pub idk2: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.idk3)
    pub idk3: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.idk4)
    pub idk4: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.PosRepeat.pos)
    pub pos: ::protobuf::MessageField<Vector>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.PosRepeat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PosRepeat {
    fn default() -> &'a PosRepeat {
        <PosRepeat as ::protobuf::Message>::default_instance()
    }
}

impl PosRepeat {
    pub fn new() -> PosRepeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &PosRepeat| { &m.uid },
            |m: &mut PosRepeat| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "rot",
            |m: &PosRepeat| { &m.rot },
            |m: &mut PosRepeat| { &mut m.rot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idk1",
            |m: &PosRepeat| { &m.idk1 },
            |m: &mut PosRepeat| { &mut m.idk1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idk2",
            |m: &PosRepeat| { &m.idk2 },
            |m: &mut PosRepeat| { &mut m.idk2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idk3",
            |m: &PosRepeat| { &m.idk3 },
            |m: &mut PosRepeat| { &mut m.idk3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idk4",
            |m: &PosRepeat| { &m.idk4 },
            |m: &mut PosRepeat| { &mut m.idk4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "pos",
            |m: &PosRepeat| { &m.pos },
            |m: &mut PosRepeat| { &mut m.pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PosRepeat>(
            "PosRepeat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PosRepeat {
    const NAME: &'static str = "PosRepeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.uid = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rot)?;
                },
                24 => {
                    self.idk1 = is.read_uint32()?;
                },
                45 => {
                    self.idk2 = is.read_float()?;
                },
                69 => {
                    self.idk3 = is.read_float()?;
                },
                80 => {
                    self.idk4 = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.uid);
        }
        if let Some(v) = self.rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.idk1 != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.idk1);
        }
        if self.idk2 != 0. {
            my_size += 1 + 4;
        }
        if self.idk3 != 0. {
            my_size += 1 + 4;
        }
        if self.idk4 != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.idk4);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(2, self.uid)?;
        }
        if let Some(v) = self.rot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.idk1 != 0 {
            os.write_uint32(3, self.idk1)?;
        }
        if self.idk2 != 0. {
            os.write_float(5, self.idk2)?;
        }
        if self.idk3 != 0. {
            os.write_float(8, self.idk3)?;
        }
        if self.idk4 != 0 {
            os.write_uint32(10, self.idk4)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PosRepeat {
        PosRepeat::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.rot.clear();
        self.idk1 = 0;
        self.idk2 = 0.;
        self.idk3 = 0.;
        self.idk4 = 0;
        self.pos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PosRepeat {
        static instance: PosRepeat = PosRepeat {
            uid: 0,
            rot: ::protobuf::MessageField::none(),
            idk1: 0,
            idk2: 0.,
            idk3: 0.,
            idk4: 0,
            pos: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PosRepeat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PosRepeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PosRepeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PosRepeat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.WorldPlayerLocationNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WorldPlayerLocationNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.WorldPlayerLocationNotify.wlocs)
    pub wlocs: ::protobuf::MessageField<WorldPlayerLocation>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.WorldPlayerLocationNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldPlayerLocationNotify {
    fn default() -> &'a WorldPlayerLocationNotify {
        <WorldPlayerLocationNotify as ::protobuf::Message>::default_instance()
    }
}

impl WorldPlayerLocationNotify {
    pub fn new() -> WorldPlayerLocationNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, WorldPlayerLocation>(
            "wlocs",
            |m: &WorldPlayerLocationNotify| { &m.wlocs },
            |m: &mut WorldPlayerLocationNotify| { &mut m.wlocs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldPlayerLocationNotify>(
            "WorldPlayerLocationNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldPlayerLocationNotify {
    const NAME: &'static str = "WorldPlayerLocationNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.wlocs)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.wlocs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.wlocs.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldPlayerLocationNotify {
        WorldPlayerLocationNotify::new()
    }

    fn clear(&mut self) {
        self.wlocs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldPlayerLocationNotify {
        static instance: WorldPlayerLocationNotify = WorldPlayerLocationNotify {
            wlocs: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldPlayerLocationNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldPlayerLocationNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldPlayerLocationNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldPlayerLocationNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.WorldNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WorldNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.WorldNotify.scene)
    pub scene: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.WorldNotify.loc)
    pub loc: ::protobuf::MessageField<PlayerLocation>,
    // @@protoc_insertion_point(field:Mualani.Guide.WorldNotify.rep)
    pub rep: ::protobuf::MessageField<PosRepeat>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.WorldNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldNotify {
    fn default() -> &'a WorldNotify {
        <WorldNotify as ::protobuf::Message>::default_instance()
    }
}

impl WorldNotify {
    pub fn new() -> WorldNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene",
            |m: &WorldNotify| { &m.scene },
            |m: &mut WorldNotify| { &mut m.scene },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PlayerLocation>(
            "loc",
            |m: &WorldNotify| { &m.loc },
            |m: &mut WorldNotify| { &mut m.loc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PosRepeat>(
            "rep",
            |m: &WorldNotify| { &m.rep },
            |m: &mut WorldNotify| { &mut m.rep },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldNotify>(
            "WorldNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldNotify {
    const NAME: &'static str = "WorldNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.scene = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.loc)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rep)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.scene != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.scene);
        }
        if let Some(v) = self.loc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rep.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.scene != 0 {
            os.write_uint32(13, self.scene)?;
        }
        if let Some(v) = self.loc.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.rep.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldNotify {
        WorldNotify::new()
    }

    fn clear(&mut self) {
        self.scene = 0;
        self.loc.clear();
        self.rep.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldNotify {
        static instance: WorldNotify = WorldNotify {
            scene: 0,
            loc: ::protobuf::MessageField::none(),
            rep: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.TickPosition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TickPosition {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.TickPosition.pos)
    pub pos: ::protobuf::MessageField<Vector>,
    // @@protoc_insertion_point(field:Mualani.Guide.TickPosition.rot)
    pub rot: ::protobuf::MessageField<Vector>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.TickPosition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TickPosition {
    fn default() -> &'a TickPosition {
        <TickPosition as ::protobuf::Message>::default_instance()
    }
}

impl TickPosition {
    pub fn new() -> TickPosition {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "pos",
            |m: &TickPosition| { &m.pos },
            |m: &mut TickPosition| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector>(
            "rot",
            |m: &TickPosition| { &m.rot },
            |m: &mut TickPosition| { &mut m.rot },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TickPosition>(
            "TickPosition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TickPosition {
    const NAME: &'static str = "TickPosition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rot)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.rot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TickPosition {
        TickPosition::new()
    }

    fn clear(&mut self) {
        self.pos.clear();
        self.rot.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TickPosition {
        static instance: TickPosition = TickPosition {
            pos: ::protobuf::MessageField::none(),
            rot: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TickPosition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TickPosition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TickPosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TickPosition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.UpdateInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateInfo {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.UpdateInfo.id)
    pub id: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.UpdateInfo.pos)
    pub pos: ::protobuf::MessageField<TickPosition>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.UpdateInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateInfo {
    fn default() -> &'a UpdateInfo {
        <UpdateInfo as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInfo {
    pub fn new() -> UpdateInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UpdateInfo| { &m.id },
            |m: &mut UpdateInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TickPosition>(
            "pos",
            |m: &UpdateInfo| { &m.pos },
            |m: &mut UpdateInfo| { &mut m.pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateInfo>(
            "UpdateInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateInfo {
    const NAME: &'static str = "UpdateInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateInfo {
        UpdateInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.pos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateInfo {
        static instance: UpdateInfo = UpdateInfo {
            id: 0,
            pos: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.TickInner)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TickInner {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.TickInner.info)
    pub info: ::protobuf::MessageField<UpdateInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.TickInner.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TickInner {
    fn default() -> &'a TickInner {
        <TickInner as ::protobuf::Message>::default_instance()
    }
}

impl TickInner {
    pub fn new() -> TickInner {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UpdateInfo>(
            "info",
            |m: &TickInner| { &m.info },
            |m: &mut TickInner| { &mut m.info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TickInner>(
            "TickInner",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TickInner {
    const NAME: &'static str = "TickInner";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TickInner {
        TickInner::new()
    }

    fn clear(&mut self) {
        self.info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TickInner {
        static instance: TickInner = TickInner {
            info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TickInner {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TickInner").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TickInner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TickInner {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ClientTick)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientTick {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ClientTick.inner)
    pub inner: ::protobuf::MessageField<TickInner>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ClientTick.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientTick {
    fn default() -> &'a ClientTick {
        <ClientTick as ::protobuf::Message>::default_instance()
    }
}

impl ClientTick {
    pub fn new() -> ClientTick {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TickInner>(
            "inner",
            |m: &ClientTick| { &m.inner },
            |m: &mut ClientTick| { &mut m.inner },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientTick>(
            "ClientTick",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientTick {
    const NAME: &'static str = "ClientTick";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inner)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.inner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.inner.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientTick {
        ClientTick::new()
    }

    fn clear(&mut self) {
        self.inner.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientTick {
        static instance: ClientTick = ClientTick {
            inner: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientTick {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientTick").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientTick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTick {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ClientTickWraper)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientTickWraper {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ClientTickWraper.tick)
    pub tick: ::protobuf::MessageField<ClientTick>,
    // @@protoc_insertion_point(field:Mualani.Guide.ClientTickWraper.type)
    pub type_: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ClientTickWraper.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientTickWraper {
    fn default() -> &'a ClientTickWraper {
        <ClientTickWraper as ::protobuf::Message>::default_instance()
    }
}

impl ClientTickWraper {
    pub fn new() -> ClientTickWraper {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ClientTick>(
            "tick",
            |m: &ClientTickWraper| { &m.tick },
            |m: &mut ClientTickWraper| { &mut m.tick },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ClientTickWraper| { &m.type_ },
            |m: &mut ClientTickWraper| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientTickWraper>(
            "ClientTickWraper",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientTickWraper {
    const NAME: &'static str = "ClientTickWraper";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tick)?;
                },
                64 => {
                    self.type_ = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tick.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.type_ != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.type_);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tick.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.type_ != 0 {
            os.write_uint32(8, self.type_)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientTickWraper {
        ClientTickWraper::new()
    }

    fn clear(&mut self) {
        self.tick.clear();
        self.type_ = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientTickWraper {
        static instance: ClientTickWraper = ClientTickWraper {
            tick: ::protobuf::MessageField::none(),
            type_: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientTickWraper {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientTickWraper").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientTickWraper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTickWraper {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ClientTicks)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientTicks {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ClientTicks.wrp)
    pub wrp: ::std::vec::Vec<ClientTickWraper>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ClientTicks.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientTicks {
    fn default() -> &'a ClientTicks {
        <ClientTicks as ::protobuf::Message>::default_instance()
    }
}

impl ClientTicks {
    pub fn new() -> ClientTicks {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wrp",
            |m: &ClientTicks| { &m.wrp },
            |m: &mut ClientTicks| { &mut m.wrp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientTicks>(
            "ClientTicks",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientTicks {
    const NAME: &'static str = "ClientTicks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.wrp.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.wrp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.wrp {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientTicks {
        ClientTicks::new()
    }

    fn clear(&mut self) {
        self.wrp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientTicks {
        static instance: ClientTicks = ClientTicks {
            wrp: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientTicks {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientTicks").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientTicks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientTicks {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fWorldPlayerLocationNotify.proto\x12\rMualani.Guide\"2\n\x06Vector\
    \x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x01(\x02R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x02R\x01z\"t\n\x0ePlayer\
    Location\x12\x10\n\x03uid\x18\x0e\x20\x01(\rR\x03uid\x12'\n\x03rot\x18\
    \x01\x20\x01(\x0b2\x15.Mualani.Guide.VectorR\x03rot\x12'\n\x03pos\x18\
    \x06\x20\x01(\x0b2\x15.Mualani.Guide.VectorR\x03pos\"\\\n\x13WorldPlayer\
    Location\x12\x14\n\x05scene\x18\r\x20\x01(\rR\x05scene\x12/\n\x03loc\x18\
    \x05\x20\x01(\x0b2\x1d.Mualani.Guide.PlayerLocationR\x03loc\"\xbf\x01\n\
    \tPosRepeat\x12\x10\n\x03uid\x18\x02\x20\x01(\rR\x03uid\x12'\n\x03rot\
    \x18\x0c\x20\x01(\x0b2\x15.Mualani.Guide.VectorR\x03rot\x12\x12\n\x04idk\
    1\x18\x03\x20\x01(\rR\x04idk1\x12\x12\n\x04idk2\x18\x05\x20\x01(\x02R\
    \x04idk2\x12\x12\n\x04idk3\x18\x08\x20\x01(\x02R\x04idk3\x12\x12\n\x04id\
    k4\x18\n\x20\x01(\rR\x04idk4\x12'\n\x03pos\x18\x01\x20\x01(\x0b2\x15.Mua\
    lani.Guide.VectorR\x03pos\"U\n\x19WorldPlayerLocationNotify\x128\n\x05wl\
    ocs\x18\x01\x20\x01(\x0b2\".Mualani.Guide.WorldPlayerLocationR\x05wlocs\
    \"\x80\x01\n\x0bWorldNotify\x12\x14\n\x05scene\x18\r\x20\x01(\rR\x05scen\
    e\x12/\n\x03loc\x18\x07\x20\x01(\x0b2\x1d.Mualani.Guide.PlayerLocationR\
    \x03loc\x12*\n\x03rep\x18\x01\x20\x01(\x0b2\x18.Mualani.Guide.PosRepeatR\
    \x03rep\"`\n\x0cTickPosition\x12'\n\x03pos\x18\x01\x20\x01(\x0b2\x15.Mua\
    lani.Guide.VectorR\x03pos\x12'\n\x03rot\x18\x02\x20\x01(\x0b2\x15.Mualan\
    i.Guide.VectorR\x03rot\"X\n\nUpdateInfo\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \rR\x02id\x122\n\x03pos\x18\x02\x20\x01(\x0b2\x1b.Mualani.Guide.TickPosi\
    tionH\0R\x03pos\x88\x01\x01B\x06\n\x04_pos\"H\n\tTickInner\x122\n\x04inf\
    o\x18\x0e\x20\x01(\x0b2\x19.Mualani.Guide.UpdateInfoH\0R\x04info\x88\x01\
    \x01B\x07\n\x05_info\"<\n\nClientTick\x12.\n\x05inner\x18\x01\x20\x01(\
    \x0b2\x18.Mualani.Guide.TickInnerR\x05inner\"U\n\x10ClientTickWraper\x12\
    -\n\x04tick\x18\x0e\x20\x01(\x0b2\x19.Mualani.Guide.ClientTickR\x04tick\
    \x12\x12\n\x04type\x18\x08\x20\x01(\rR\x04type\"@\n\x0bClientTicks\x121\
    \n\x03wrp\x18\x06\x20\x03(\x0b2\x1f.Mualani.Guide.ClientTickWraperR\x03w\
    rpb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(Vector::generated_message_descriptor_data());
            messages.push(PlayerLocation::generated_message_descriptor_data());
            messages.push(WorldPlayerLocation::generated_message_descriptor_data());
            messages.push(PosRepeat::generated_message_descriptor_data());
            messages.push(WorldPlayerLocationNotify::generated_message_descriptor_data());
            messages.push(WorldNotify::generated_message_descriptor_data());
            messages.push(TickPosition::generated_message_descriptor_data());
            messages.push(UpdateInfo::generated_message_descriptor_data());
            messages.push(TickInner::generated_message_descriptor_data());
            messages.push(ClientTick::generated_message_descriptor_data());
            messages.push(ClientTickWraper::generated_message_descriptor_data());
            messages.push(ClientTicks::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
