// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerEnterSceneNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.Position)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Position {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.Position.x)
    pub x: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.Position.y)
    pub y: f32,
    // @@protoc_insertion_point(field:Mualani.Guide.Position.z)
    pub z: f32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.Position.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Position| { &m.x },
            |m: &mut Position| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Position| { &m.y },
            |m: &mut Position| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Position| { &m.z },
            |m: &mut Position| { &mut m.z },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Position>(
            "Position",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Position {
    const NAME: &'static str = "Position";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                29 => {
                    self.z = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        if self.z != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.z != 0. {
            os.write_float(3, self.z)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Position {
        Position::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Position {
        static instance: Position = Position {
            x: 0.,
            y: 0.,
            z: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Position {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Position").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.MapInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MapInfo {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.MapInfo.unlocked_map_layer_id_list)
    pub unlocked_map_layer_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:Mualani.Guide.MapInfo.unlocked_map_layer_floor_id_list)
    pub unlocked_map_layer_floor_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:Mualani.Guide.MapInfo.unlocked_map_layer_group_id_list)
    pub unlocked_map_layer_group_id_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.MapInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MapInfo {
    fn default() -> &'a MapInfo {
        <MapInfo as ::protobuf::Message>::default_instance()
    }
}

impl MapInfo {
    pub fn new() -> MapInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlocked_map_layer_id_list",
            |m: &MapInfo| { &m.unlocked_map_layer_id_list },
            |m: &mut MapInfo| { &mut m.unlocked_map_layer_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlocked_map_layer_floor_id_list",
            |m: &MapInfo| { &m.unlocked_map_layer_floor_id_list },
            |m: &mut MapInfo| { &mut m.unlocked_map_layer_floor_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlocked_map_layer_group_id_list",
            |m: &MapInfo| { &m.unlocked_map_layer_group_id_list },
            |m: &mut MapInfo| { &mut m.unlocked_map_layer_group_id_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MapInfo>(
            "MapInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MapInfo {
    const NAME: &'static str = "MapInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlocked_map_layer_id_list)?;
                },
                88 => {
                    self.unlocked_map_layer_id_list.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlocked_map_layer_floor_id_list)?;
                },
                48 => {
                    self.unlocked_map_layer_floor_id_list.push(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlocked_map_layer_group_id_list)?;
                },
                24 => {
                    self.unlocked_map_layer_group_id_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.unlocked_map_layer_id_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.unlocked_map_layer_floor_id_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.unlocked_map_layer_group_id_list);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(11, &self.unlocked_map_layer_id_list)?;
        os.write_repeated_packed_uint32(6, &self.unlocked_map_layer_floor_id_list)?;
        os.write_repeated_packed_uint32(3, &self.unlocked_map_layer_group_id_list)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MapInfo {
        MapInfo::new()
    }

    fn clear(&mut self) {
        self.unlocked_map_layer_id_list.clear();
        self.unlocked_map_layer_floor_id_list.clear();
        self.unlocked_map_layer_group_id_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MapInfo {
        static instance: MapInfo = MapInfo {
            unlocked_map_layer_id_list: ::std::vec::Vec::new(),
            unlocked_map_layer_floor_id_list: ::std::vec::Vec::new(),
            unlocked_map_layer_group_id_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MapInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MapInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MapInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.EnterSceneNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnterSceneNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.WL)
    pub WL: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.puid)
    pub puid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.enter_id)
    pub enter_id: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.pos)
    pub pos: ::protobuf::MessageField<Position>,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.tags)
    pub tags: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.startms)
    pub startms: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.enter_msg)
    pub enter_msg: ::std::string::String,
    // @@protoc_insertion_point(field:Mualani.Guide.EnterSceneNotify.minf)
    pub minf: ::protobuf::MessageField<MapInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.EnterSceneNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnterSceneNotify {
    fn default() -> &'a EnterSceneNotify {
        <EnterSceneNotify as ::protobuf::Message>::default_instance()
    }
}

impl EnterSceneNotify {
    pub fn new() -> EnterSceneNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "WL",
            |m: &EnterSceneNotify| { &m.WL },
            |m: &mut EnterSceneNotify| { &mut m.WL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "puid",
            |m: &EnterSceneNotify| { &m.puid },
            |m: &mut EnterSceneNotify| { &mut m.puid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enter_id",
            |m: &EnterSceneNotify| { &m.enter_id },
            |m: &mut EnterSceneNotify| { &mut m.enter_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Position>(
            "pos",
            |m: &EnterSceneNotify| { &m.pos },
            |m: &mut EnterSceneNotify| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &EnterSceneNotify| { &m.tags },
            |m: &mut EnterSceneNotify| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "startms",
            |m: &EnterSceneNotify| { &m.startms },
            |m: &mut EnterSceneNotify| { &mut m.startms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enter_msg",
            |m: &EnterSceneNotify| { &m.enter_msg },
            |m: &mut EnterSceneNotify| { &mut m.enter_msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MapInfo>(
            "minf",
            |m: &EnterSceneNotify| { &m.minf },
            |m: &mut EnterSceneNotify| { &mut m.minf },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnterSceneNotify>(
            "EnterSceneNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnterSceneNotify {
    const NAME: &'static str = "EnterSceneNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.WL = is.read_uint32()?;
                },
                32 => {
                    self.puid = is.read_uint32()?;
                },
                64 => {
                    self.enter_id = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.tags)?;
                },
                88 => {
                    self.tags.push(is.read_uint32()?);
                },
                112 => {
                    self.startms = is.read_uint32()?;
                },
                458 => {
                    self.enter_msg = is.read_string()?;
                },
                4202 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.minf)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.WL != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.WL);
        }
        if self.puid != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.puid);
        }
        if self.enter_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.enter_id);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.tags);
        if self.startms != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.startms);
        }
        if !self.enter_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.enter_msg);
        }
        if let Some(v) = self.minf.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.WL != 0 {
            os.write_uint32(1, self.WL)?;
        }
        if self.puid != 0 {
            os.write_uint32(4, self.puid)?;
        }
        if self.enter_id != 0 {
            os.write_uint32(8, self.enter_id)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_repeated_packed_uint32(11, &self.tags)?;
        if self.startms != 0 {
            os.write_uint32(14, self.startms)?;
        }
        if !self.enter_msg.is_empty() {
            os.write_string(57, &self.enter_msg)?;
        }
        if let Some(v) = self.minf.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(525, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnterSceneNotify {
        EnterSceneNotify::new()
    }

    fn clear(&mut self) {
        self.WL = 0;
        self.puid = 0;
        self.enter_id = 0;
        self.pos.clear();
        self.tags.clear();
        self.startms = 0;
        self.enter_msg.clear();
        self.minf.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnterSceneNotify {
        static instance: EnterSceneNotify = EnterSceneNotify {
            WL: 0,
            puid: 0,
            enter_id: 0,
            pos: ::protobuf::MessageField::none(),
            tags: ::std::vec::Vec::new(),
            startms: 0,
            enter_msg: ::std::string::String::new(),
            minf: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnterSceneNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnterSceneNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnterSceneNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnterSceneNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cPlayerEnterSceneNotify.proto\x12\rMualani.Guide\"4\n\x08Position\
    \x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x01(\x02R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x02R\x01z\"\xd3\x01\n\
    \x07MapInfo\x12:\n\x1aunlocked_map_layer_id_list\x18\x0b\x20\x03(\rR\x16\
    unlockedMapLayerIdList\x12E\n\x20unlocked_map_layer_floor_id_list\x18\
    \x06\x20\x03(\rR\x1bunlockedMapLayerFloorIdList\x12E\n\x20unlocked_map_l\
    ayer_group_id_list\x18\x03\x20\x03(\rR\x1bunlockedMapLayerGroupIdList\"\
    \xf4\x01\n\x10EnterSceneNotify\x12\x0e\n\x02WL\x18\x01\x20\x01(\rR\x02WL\
    \x12\x12\n\x04puid\x18\x04\x20\x01(\rR\x04puid\x12\x19\n\x08enter_id\x18\
    \x08\x20\x01(\rR\x07enterId\x12)\n\x03pos\x18\t\x20\x01(\x0b2\x17.Mualan\
    i.Guide.PositionR\x03pos\x12\x12\n\x04tags\x18\x0b\x20\x03(\rR\x04tags\
    \x12\x18\n\x07startms\x18\x0e\x20\x01(\rR\x07startms\x12\x1b\n\tenter_ms\
    g\x189\x20\x01(\tR\x08enterMsg\x12+\n\x04minf\x18\x8d\x04\x20\x01(\x0b2\
    \x16.Mualani.Guide.MapInfoR\x04minfb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Position::generated_message_descriptor_data());
            messages.push(MapInfo::generated_message_descriptor_data());
            messages.push(EnterSceneNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
