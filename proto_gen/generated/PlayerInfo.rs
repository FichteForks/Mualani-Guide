// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.PlayerProperty)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerProperty {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerProperty.propid)
    pub propid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerProperty.val)
    pub val: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerProperty.fval)
    pub fval: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerProperty.ival)
    pub ival: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.PlayerProperty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerProperty {
    fn default() -> &'a PlayerProperty {
        <PlayerProperty as ::protobuf::Message>::default_instance()
    }
}

impl PlayerProperty {
    pub fn new() -> PlayerProperty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "propid",
            |m: &PlayerProperty| { &m.propid },
            |m: &mut PlayerProperty| { &mut m.propid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "val",
            |m: &PlayerProperty| { &m.val },
            |m: &mut PlayerProperty| { &mut m.val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fval",
            |m: &PlayerProperty| { &m.fval },
            |m: &mut PlayerProperty| { &mut m.fval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ival",
            |m: &PlayerProperty| { &m.ival },
            |m: &mut PlayerProperty| { &mut m.ival },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerProperty>(
            "PlayerProperty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerProperty {
    const NAME: &'static str = "PlayerProperty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.propid = is.read_uint32()?;
                },
                16 => {
                    self.val = ::std::option::Option::Some(is.read_int64()?);
                },
                29 => {
                    self.fval = ::std::option::Option::Some(is.read_float()?);
                },
                32 => {
                    self.ival = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.propid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.propid);
        }
        if let Some(v) = self.val {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.fval {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ival {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.propid != 0 {
            os.write_uint32(1, self.propid)?;
        }
        if let Some(v) = self.val {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.fval {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.ival {
            os.write_int64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerProperty {
        PlayerProperty::new()
    }

    fn clear(&mut self) {
        self.propid = 0;
        self.val = ::std::option::Option::None;
        self.fval = ::std::option::Option::None;
        self.ival = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerProperty {
        static instance: PlayerProperty = PlayerProperty {
            propid: 0,
            val: ::std::option::Option::None,
            fval: ::std::option::Option::None,
            ival: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerProperty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerProperty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerProperty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.PlayerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerInfo {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerInfo.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerInfo.server_ms)
    pub server_ms: u64,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerInfo.region_id)
    pub region_id: u64,
    // @@protoc_insertion_point(field:Mualani.Guide.PlayerInfo.props)
    pub props: ::std::collections::HashMap<u32, PlayerProperty>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.PlayerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerInfo {
    fn default() -> &'a PlayerInfo {
        <PlayerInfo as ::protobuf::Message>::default_instance()
    }
}

impl PlayerInfo {
    pub fn new() -> PlayerInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PlayerInfo| { &m.name },
            |m: &mut PlayerInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_ms",
            |m: &PlayerInfo| { &m.server_ms },
            |m: &mut PlayerInfo| { &mut m.server_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region_id",
            |m: &PlayerInfo| { &m.region_id },
            |m: &mut PlayerInfo| { &mut m.region_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "props",
            |m: &PlayerInfo| { &m.props },
            |m: &mut PlayerInfo| { &mut m.props },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerInfo>(
            "PlayerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerInfo {
    const NAME: &'static str = "PlayerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.name = is.read_string()?;
                },
                64 => {
                    self.server_ms = is.read_uint64()?;
                },
                24 => {
                    self.region_id = is.read_uint64()?;
                },
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.props.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.server_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.server_ms);
        }
        if self.region_id != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.region_id);
        }
        for (k, v) in &self.props {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.server_ms != 0 {
            os.write_uint64(8, self.server_ms)?;
        }
        if self.region_id != 0 {
            os.write_uint64(3, self.region_id)?;
        }
        for (k, v) in &self.props {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerInfo {
        PlayerInfo::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.server_ms = 0;
        self.region_id = 0;
        self.props.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerInfo {
        static instance: ::protobuf::rt::Lazy<PlayerInfo> = ::protobuf::rt::Lazy::new();
        instance.get(PlayerInfo::new)
    }
}

impl ::protobuf::MessageFull for PlayerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10PlayerInfo.proto\x12\rMualani.Guide\"\x8b\x01\n\x0ePlayerProperty\
    \x12\x16\n\x06propid\x18\x01\x20\x01(\rR\x06propid\x12\x15\n\x03val\x18\
    \x02\x20\x01(\x03H\0R\x03val\x88\x01\x01\x12\x17\n\x04fval\x18\x03\x20\
    \x01(\x02H\x01R\x04fval\x88\x01\x01\x12\x17\n\x04ival\x18\x04\x20\x01(\
    \x03H\x02R\x04ival\x88\x01\x01B\x06\n\x04_valB\x07\n\x05_fvalB\x07\n\x05\
    _ival\"\xef\x01\n\nPlayerInfo\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04n\
    ame\x12\x1b\n\tserver_ms\x18\x08\x20\x01(\x04R\x08serverMs\x12\x1b\n\tre\
    gion_id\x18\x03\x20\x01(\x04R\x08regionId\x12:\n\x05props\x18\x01\x20\
    \x03(\x0b2$.Mualani.Guide.PlayerInfo.PropsEntryR\x05props\x1aW\n\nPropsE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x123\n\x05value\x18\x02\
    \x20\x01(\x0b2\x1d.Mualani.Guide.PlayerPropertyR\x05value:\x028\x01b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PlayerProperty::generated_message_descriptor_data());
            messages.push(PlayerInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
