// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `QuestNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.SubQuest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubQuest {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.SubQuest.subid)
    pub subid: u64,
    // @@protoc_insertion_point(field:Mualani.Guide.SubQuest.state)
    pub state: ::protobuf::EnumOrUnknown<QuestState>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.SubQuest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubQuest {
    fn default() -> &'a SubQuest {
        <SubQuest as ::protobuf::Message>::default_instance()
    }
}

impl SubQuest {
    pub fn new() -> SubQuest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "subid",
            |m: &SubQuest| { &m.subid },
            |m: &mut SubQuest| { &mut m.subid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &SubQuest| { &m.state },
            |m: &mut SubQuest| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubQuest>(
            "SubQuest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubQuest {
    const NAME: &'static str = "SubQuest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.subid = is.read_uint64()?;
                },
                112 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.subid != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.subid);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(QuestState::QUEST_STATE_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.subid != 0 {
            os.write_uint64(11, self.subid)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(QuestState::QUEST_STATE_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubQuest {
        SubQuest::new()
    }

    fn clear(&mut self) {
        self.subid = 0;
        self.state = ::protobuf::EnumOrUnknown::new(QuestState::QUEST_STATE_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubQuest {
        static instance: SubQuest = SubQuest {
            subid: 0,
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubQuest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubQuest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubQuest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubQuest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.Quest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Quest {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.accept_time)
    pub accept_time: u64,
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.main_id)
    pub main_id: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.state)
    pub state: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.finished)
    pub finished: bool,
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.quest_var)
    pub quest_var: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:Mualani.Guide.Quest.subqs)
    pub subqs: ::std::vec::Vec<SubQuest>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.Quest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Quest {
    fn default() -> &'a Quest {
        <Quest as ::protobuf::Message>::default_instance()
    }
}

impl Quest {
    pub fn new() -> Quest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accept_time",
            |m: &Quest| { &m.accept_time },
            |m: &mut Quest| { &mut m.accept_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "main_id",
            |m: &Quest| { &m.main_id },
            |m: &mut Quest| { &mut m.main_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Quest| { &m.state },
            |m: &mut Quest| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "finished",
            |m: &Quest| { &m.finished },
            |m: &mut Quest| { &mut m.finished },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quest_var",
            |m: &Quest| { &m.quest_var },
            |m: &mut Quest| { &mut m.quest_var },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subqs",
            |m: &Quest| { &m.subqs },
            |m: &mut Quest| { &mut m.subqs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Quest>(
            "Quest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Quest {
    const NAME: &'static str = "Quest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.accept_time = is.read_uint64()?;
                },
                104 => {
                    self.main_id = is.read_uint32()?;
                },
                48 => {
                    self.state = is.read_uint32()?;
                },
                120 => {
                    self.finished = is.read_bool()?;
                },
                18 => {
                    is.read_repeated_packed_int32_into(&mut self.quest_var)?;
                },
                16 => {
                    self.quest_var.push(is.read_int32()?);
                },
                58 => {
                    self.subqs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.accept_time != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.accept_time);
        }
        if self.main_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.main_id);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.state);
        }
        if self.finished != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::vec_packed_int32_size(2, &self.quest_var);
        for value in &self.subqs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.accept_time != 0 {
            os.write_uint64(9, self.accept_time)?;
        }
        if self.main_id != 0 {
            os.write_uint32(13, self.main_id)?;
        }
        if self.state != 0 {
            os.write_uint32(6, self.state)?;
        }
        if self.finished != false {
            os.write_bool(15, self.finished)?;
        }
        os.write_repeated_packed_int32(2, &self.quest_var)?;
        for v in &self.subqs {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Quest {
        Quest::new()
    }

    fn clear(&mut self) {
        self.accept_time = 0;
        self.main_id = 0;
        self.state = 0;
        self.finished = false;
        self.quest_var.clear();
        self.subqs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Quest {
        static instance: Quest = Quest {
            accept_time: 0,
            main_id: 0,
            state: 0,
            finished: false,
            quest_var: ::std::vec::Vec::new(),
            subqs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Quest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Quest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Quest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Quest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.QuestNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QuestNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.QuestNotify.quests)
    pub quests: ::std::vec::Vec<Quest>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.QuestNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuestNotify {
    fn default() -> &'a QuestNotify {
        <QuestNotify as ::protobuf::Message>::default_instance()
    }
}

impl QuestNotify {
    pub fn new() -> QuestNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quests",
            |m: &QuestNotify| { &m.quests },
            |m: &mut QuestNotify| { &mut m.quests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuestNotify>(
            "QuestNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuestNotify {
    const NAME: &'static str = "QuestNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    self.quests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.quests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.quests {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuestNotify {
        QuestNotify::new()
    }

    fn clear(&mut self) {
        self.quests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuestNotify {
        static instance: QuestNotify = QuestNotify {
            quests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuestNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuestNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuestNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuestNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Mualani.Guide.QuestState)
pub enum QuestState {
    // @@protoc_insertion_point(enum_value:Mualani.Guide.QuestState.QUEST_STATE_NONE)
    QUEST_STATE_NONE = 0,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.QuestState.QUEST_STATE_UNSTARTED)
    QUEST_STATE_UNSTARTED = 1,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.QuestState.QUEST_STATE_UNFINISHED)
    QUEST_STATE_UNFINISHED = 2,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.QuestState.QUEST_STATE_FINISHED)
    QUEST_STATE_FINISHED = 3,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.QuestState.QUEST_STATE_FAILED)
    QUEST_STATE_FAILED = 4,
}

impl ::protobuf::Enum for QuestState {
    const NAME: &'static str = "QuestState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<QuestState> {
        match value {
            0 => ::std::option::Option::Some(QuestState::QUEST_STATE_NONE),
            1 => ::std::option::Option::Some(QuestState::QUEST_STATE_UNSTARTED),
            2 => ::std::option::Option::Some(QuestState::QUEST_STATE_UNFINISHED),
            3 => ::std::option::Option::Some(QuestState::QUEST_STATE_FINISHED),
            4 => ::std::option::Option::Some(QuestState::QUEST_STATE_FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<QuestState> {
        match str {
            "QUEST_STATE_NONE" => ::std::option::Option::Some(QuestState::QUEST_STATE_NONE),
            "QUEST_STATE_UNSTARTED" => ::std::option::Option::Some(QuestState::QUEST_STATE_UNSTARTED),
            "QUEST_STATE_UNFINISHED" => ::std::option::Option::Some(QuestState::QUEST_STATE_UNFINISHED),
            "QUEST_STATE_FINISHED" => ::std::option::Option::Some(QuestState::QUEST_STATE_FINISHED),
            "QUEST_STATE_FAILED" => ::std::option::Option::Some(QuestState::QUEST_STATE_FAILED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [QuestState] = &[
        QuestState::QUEST_STATE_NONE,
        QuestState::QUEST_STATE_UNSTARTED,
        QuestState::QUEST_STATE_UNFINISHED,
        QuestState::QUEST_STATE_FINISHED,
        QuestState::QUEST_STATE_FAILED,
    ];
}

impl ::protobuf::EnumFull for QuestState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("QuestState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for QuestState {
    fn default() -> Self {
        QuestState::QUEST_STATE_NONE
    }
}

impl QuestState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<QuestState>("QuestState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11QuestNotify.proto\x12\rMualani.Guide\"Q\n\x08SubQuest\x12\x14\n\
    \x05subid\x18\x0b\x20\x01(\x04R\x05subid\x12/\n\x05state\x18\x0e\x20\x01\
    (\x0e2\x19.Mualani.Guide.QuestStateR\x05state\"\xbf\x01\n\x05Quest\x12\
    \x1f\n\x0baccept_time\x18\t\x20\x01(\x04R\nacceptTime\x12\x17\n\x07main_\
    id\x18\r\x20\x01(\rR\x06mainId\x12\x14\n\x05state\x18\x06\x20\x01(\rR\
    \x05state\x12\x1a\n\x08finished\x18\x0f\x20\x01(\x08R\x08finished\x12\
    \x1b\n\tquest_var\x18\x02\x20\x03(\x05R\x08questVar\x12-\n\x05subqs\x18\
    \x07\x20\x03(\x0b2\x17.Mualani.Guide.SubQuestR\x05subqs\";\n\x0bQuestNot\
    ify\x12,\n\x06quests\x18\n\x20\x03(\x0b2\x14.Mualani.Guide.QuestR\x06que\
    sts*\x8b\x01\n\nQuestState\x12\x14\n\x10QUEST_STATE_NONE\x10\0\x12\x19\n\
    \x15QUEST_STATE_UNSTARTED\x10\x01\x12\x1a\n\x16QUEST_STATE_UNFINISHED\
    \x10\x02\x12\x18\n\x14QUEST_STATE_FINISHED\x10\x03\x12\x16\n\x12QUEST_ST\
    ATE_FAILED\x10\x04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(SubQuest::generated_message_descriptor_data());
            messages.push(Quest::generated_message_descriptor_data());
            messages.push(QuestNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(QuestState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
