// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FriendInit.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.ProfileIcon)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfileIcon {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ProfileIcon.profile_char)
    pub profile_char: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:Mualani.Guide.ProfileIcon.icon_id)
    pub icon_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ProfileIcon.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileIcon {
    fn default() -> &'a ProfileIcon {
        <ProfileIcon as ::protobuf::Message>::default_instance()
    }
}

impl ProfileIcon {
    pub fn new() -> ProfileIcon {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "profile_char",
            |m: &ProfileIcon| { &m.profile_char },
            |m: &mut ProfileIcon| { &mut m.profile_char },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_id",
            |m: &ProfileIcon| { &m.icon_id },
            |m: &mut ProfileIcon| { &mut m.icon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProfileIcon>(
            "ProfileIcon",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProfileIcon {
    const NAME: &'static str = "ProfileIcon";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.profile_char = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.icon_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profile_char {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.icon_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.profile_char {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.icon_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileIcon {
        ProfileIcon::new()
    }

    fn clear(&mut self) {
        self.profile_char = ::std::option::Option::None;
        self.icon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileIcon {
        static instance: ProfileIcon = ProfileIcon {
            profile_char: ::std::option::Option::None,
            icon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProfileIcon {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileIcon").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileIcon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileIcon {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.FriendBrief)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FriendBrief {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.AR)
    pub AR: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.online_state)
    pub online_state: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.WL)
    pub WL: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.namecard_bg)
    pub namecard_bg: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.signature)
    pub signature: ::std::string::String,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendBrief.icon)
    pub icon: ::protobuf::MessageField<ProfileIcon>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.FriendBrief.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FriendBrief {
    fn default() -> &'a FriendBrief {
        <FriendBrief as ::protobuf::Message>::default_instance()
    }
}

impl FriendBrief {
    pub fn new() -> FriendBrief {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &FriendBrief| { &m.uid },
            |m: &mut FriendBrief| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FriendBrief| { &m.name },
            |m: &mut FriendBrief| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AR",
            |m: &FriendBrief| { &m.AR },
            |m: &mut FriendBrief| { &mut m.AR },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_state",
            |m: &FriendBrief| { &m.online_state },
            |m: &mut FriendBrief| { &mut m.online_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "WL",
            |m: &FriendBrief| { &m.WL },
            |m: &mut FriendBrief| { &mut m.WL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "namecard_bg",
            |m: &FriendBrief| { &m.namecard_bg },
            |m: &mut FriendBrief| { &mut m.namecard_bg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &FriendBrief| { &m.signature },
            |m: &mut FriendBrief| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProfileIcon>(
            "icon",
            |m: &FriendBrief| { &m.icon },
            |m: &mut FriendBrief| { &mut m.icon },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FriendBrief>(
            "FriendBrief",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FriendBrief {
    const NAME: &'static str = "FriendBrief";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.AR = is.read_uint32()?;
                },
                48 => {
                    self.online_state = is.read_uint32()?;
                },
                56 => {
                    self.WL = is.read_uint32()?;
                },
                72 => {
                    self.namecard_bg = is.read_uint32()?;
                },
                90 => {
                    self.signature = is.read_string()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.icon)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.AR != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.AR);
        }
        if self.online_state != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.online_state);
        }
        if self.WL != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.WL);
        }
        if self.namecard_bg != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.namecard_bg);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.signature);
        }
        if let Some(v) = self.icon.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.AR != 0 {
            os.write_uint32(3, self.AR)?;
        }
        if self.online_state != 0 {
            os.write_uint32(6, self.online_state)?;
        }
        if self.WL != 0 {
            os.write_uint32(7, self.WL)?;
        }
        if self.namecard_bg != 0 {
            os.write_uint32(9, self.namecard_bg)?;
        }
        if !self.signature.is_empty() {
            os.write_string(11, &self.signature)?;
        }
        if let Some(v) = self.icon.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FriendBrief {
        FriendBrief::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.name.clear();
        self.AR = 0;
        self.online_state = 0;
        self.WL = 0;
        self.namecard_bg = 0;
        self.signature.clear();
        self.icon.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FriendBrief {
        static instance: FriendBrief = FriendBrief {
            uid: 0,
            name: ::std::string::String::new(),
            AR: 0,
            online_state: 0,
            WL: 0,
            namecard_bg: 0,
            signature: ::std::string::String::new(),
            icon: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FriendBrief {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FriendBrief").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FriendBrief {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FriendBrief {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.FriendInit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FriendInit {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInit.brief)
    pub brief: ::std::vec::Vec<FriendBrief>,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInit.access_mode)
    pub access_mode: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInit.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInit.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInit.online_state)
    pub online_state: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.FriendInit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FriendInit {
    fn default() -> &'a FriendInit {
        <FriendInit as ::protobuf::Message>::default_instance()
    }
}

impl FriendInit {
    pub fn new() -> FriendInit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "brief",
            |m: &FriendInit| { &m.brief },
            |m: &mut FriendInit| { &mut m.brief },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "access_mode",
            |m: &FriendInit| { &m.access_mode },
            |m: &mut FriendInit| { &mut m.access_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &FriendInit| { &m.uid },
            |m: &mut FriendInit| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FriendInit| { &m.name },
            |m: &mut FriendInit| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_state",
            |m: &FriendInit| { &m.online_state },
            |m: &mut FriendInit| { &mut m.online_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FriendInit>(
            "FriendInit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FriendInit {
    const NAME: &'static str = "FriendInit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    self.brief.push(is.read_message()?);
                },
                40 => {
                    self.access_mode = is.read_uint32()?;
                },
                24 => {
                    self.uid = is.read_uint32()?;
                },
                114 => {
                    self.name = is.read_string()?;
                },
                80 => {
                    self.online_state = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.brief {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.access_mode != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.access_mode);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.uid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.name);
        }
        if self.online_state != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.online_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.brief {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.access_mode != 0 {
            os.write_uint32(5, self.access_mode)?;
        }
        if self.uid != 0 {
            os.write_uint32(3, self.uid)?;
        }
        if !self.name.is_empty() {
            os.write_string(14, &self.name)?;
        }
        if self.online_state != 0 {
            os.write_uint32(10, self.online_state)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FriendInit {
        FriendInit::new()
    }

    fn clear(&mut self) {
        self.brief.clear();
        self.access_mode = 0;
        self.uid = 0;
        self.name.clear();
        self.online_state = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FriendInit {
        static instance: FriendInit = FriendInit {
            brief: ::std::vec::Vec::new(),
            access_mode: 0,
            uid: 0,
            name: ::std::string::String::new(),
            online_state: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FriendInit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FriendInit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FriendInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FriendInit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.FriendInitWrap)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FriendInitWrap {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.FriendInitWrap.init)
    pub init: ::protobuf::MessageField<FriendInit>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.FriendInitWrap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FriendInitWrap {
    fn default() -> &'a FriendInitWrap {
        <FriendInitWrap as ::protobuf::Message>::default_instance()
    }
}

impl FriendInitWrap {
    pub fn new() -> FriendInitWrap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FriendInit>(
            "init",
            |m: &FriendInitWrap| { &m.init },
            |m: &mut FriendInitWrap| { &mut m.init },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FriendInitWrap>(
            "FriendInitWrap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FriendInitWrap {
    const NAME: &'static str = "FriendInitWrap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.init)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.init.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.init.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FriendInitWrap {
        FriendInitWrap::new()
    }

    fn clear(&mut self) {
        self.init.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FriendInitWrap {
        static instance: FriendInitWrap = FriendInitWrap {
            init: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FriendInitWrap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FriendInitWrap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FriendInitWrap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FriendInitWrap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10FriendInit.proto\x12\rMualani.Guide\"p\n\x0bProfileIcon\x12&\n\x0c\
    profile_char\x18\x01\x20\x01(\rH\0R\x0bprofileChar\x88\x01\x01\x12\x1c\n\
    \x07icon_id\x18\x03\x20\x01(\rH\x01R\x06iconId\x88\x01\x01B\x0f\n\r_prof\
    ile_charB\n\n\x08_icon_id\"\xe5\x01\n\x0bFriendBrief\x12\x10\n\x03uid\
    \x18\x01\x20\x01(\rR\x03uid\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04nam\
    e\x12\x0e\n\x02AR\x18\x03\x20\x01(\rR\x02AR\x12!\n\x0conline_state\x18\
    \x06\x20\x01(\rR\x0bonlineState\x12\x0e\n\x02WL\x18\x07\x20\x01(\rR\x02W\
    L\x12\x1f\n\x0bnamecard_bg\x18\t\x20\x01(\rR\nnamecardBg\x12\x1c\n\tsign\
    ature\x18\x0b\x20\x01(\tR\tsignature\x12.\n\x04icon\x18\x0c\x20\x01(\x0b\
    2\x1a.Mualani.Guide.ProfileIconR\x04icon\"\xa8\x01\n\nFriendInit\x120\n\
    \x05brief\x18\x0f\x20\x03(\x0b2\x1a.Mualani.Guide.FriendBriefR\x05brief\
    \x12\x1f\n\x0baccess_mode\x18\x05\x20\x01(\rR\naccessMode\x12\x10\n\x03u\
    id\x18\x03\x20\x01(\rR\x03uid\x12\x12\n\x04name\x18\x0e\x20\x01(\tR\x04n\
    ame\x12!\n\x0conline_state\x18\n\x20\x01(\rR\x0bonlineState\"?\n\x0eFrie\
    ndInitWrap\x12-\n\x04init\x18\x02\x20\x01(\x0b2\x19.Mualani.Guide.Friend\
    InitR\x04initb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ProfileIcon::generated_message_descriptor_data());
            messages.push(FriendBrief::generated_message_descriptor_data());
            messages.push(FriendInit::generated_message_descriptor_data());
            messages.push(FriendInitWrap::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
