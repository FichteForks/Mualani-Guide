// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.0-rc1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ExpiditionNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Mualani.Guide.ExpiditionInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExpiditionInfo {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionInfo.state)
    pub state: ::protobuf::EnumOrUnknown<ExpiditionState>,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionInfo.exp_id)
    pub exp_id: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionInfo.hour_time)
    pub hour_time: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionInfo.start_time)
    pub start_time: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionInfo.shorten)
    pub shorten: f32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ExpiditionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExpiditionInfo {
    fn default() -> &'a ExpiditionInfo {
        <ExpiditionInfo as ::protobuf::Message>::default_instance()
    }
}

impl ExpiditionInfo {
    pub fn new() -> ExpiditionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &ExpiditionInfo| { &m.state },
            |m: &mut ExpiditionInfo| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp_id",
            |m: &ExpiditionInfo| { &m.exp_id },
            |m: &mut ExpiditionInfo| { &mut m.exp_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hour_time",
            |m: &ExpiditionInfo| { &m.hour_time },
            |m: &mut ExpiditionInfo| { &mut m.hour_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &ExpiditionInfo| { &m.start_time },
            |m: &mut ExpiditionInfo| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shorten",
            |m: &ExpiditionInfo| { &m.shorten },
            |m: &mut ExpiditionInfo| { &mut m.shorten },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExpiditionInfo>(
            "ExpiditionInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExpiditionInfo {
    const NAME: &'static str = "ExpiditionInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.exp_id = is.read_uint32()?;
                },
                24 => {
                    self.hour_time = is.read_uint32()?;
                },
                32 => {
                    self.start_time = is.read_uint32()?;
                },
                45 => {
                    self.shorten = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(ExpiditionState::AVATAR_EXPEDITION_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if self.exp_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.exp_id);
        }
        if self.hour_time != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.hour_time);
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.start_time);
        }
        if self.shorten != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(ExpiditionState::AVATAR_EXPEDITION_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.exp_id != 0 {
            os.write_uint32(2, self.exp_id)?;
        }
        if self.hour_time != 0 {
            os.write_uint32(3, self.hour_time)?;
        }
        if self.start_time != 0 {
            os.write_uint32(4, self.start_time)?;
        }
        if self.shorten != 0. {
            os.write_float(5, self.shorten)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExpiditionInfo {
        ExpiditionInfo::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(ExpiditionState::AVATAR_EXPEDITION_NONE);
        self.exp_id = 0;
        self.hour_time = 0;
        self.start_time = 0;
        self.shorten = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExpiditionInfo {
        static instance: ExpiditionInfo = ExpiditionInfo {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            exp_id: 0,
            hour_time: 0,
            start_time: 0,
            shorten: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExpiditionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExpiditionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExpiditionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpiditionInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.RewardInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RewardInfo {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.RewardInfo.itemid)
    pub itemid: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.RewardInfo.count)
    pub count: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.RewardInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RewardInfo {
    fn default() -> &'a RewardInfo {
        <RewardInfo as ::protobuf::Message>::default_instance()
    }
}

impl RewardInfo {
    pub fn new() -> RewardInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "itemid",
            |m: &RewardInfo| { &m.itemid },
            |m: &mut RewardInfo| { &mut m.itemid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &RewardInfo| { &m.count },
            |m: &mut RewardInfo| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RewardInfo>(
            "RewardInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RewardInfo {
    const NAME: &'static str = "RewardInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.itemid = is.read_uint32()?;
                },
                16 => {
                    self.count = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.itemid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.itemid);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.itemid != 0 {
            os.write_uint32(1, self.itemid)?;
        }
        if self.count != 0 {
            os.write_uint32(2, self.count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RewardInfo {
        RewardInfo::new()
    }

    fn clear(&mut self) {
        self.itemid = 0;
        self.count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RewardInfo {
        static instance: RewardInfo = RewardInfo {
            itemid: 0,
            count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RewardInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RewardInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RewardInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RewardInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ExpiditionUpdateNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExpiditionUpdateNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionUpdateNotify.expd_count)
    pub expd_count: u32,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionUpdateNotify.infos)
    pub infos: ::std::collections::HashMap<u64, ExpiditionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ExpiditionUpdateNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExpiditionUpdateNotify {
    fn default() -> &'a ExpiditionUpdateNotify {
        <ExpiditionUpdateNotify as ::protobuf::Message>::default_instance()
    }
}

impl ExpiditionUpdateNotify {
    pub fn new() -> ExpiditionUpdateNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expd_count",
            |m: &ExpiditionUpdateNotify| { &m.expd_count },
            |m: &mut ExpiditionUpdateNotify| { &mut m.expd_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "infos",
            |m: &ExpiditionUpdateNotify| { &m.infos },
            |m: &mut ExpiditionUpdateNotify| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExpiditionUpdateNotify>(
            "ExpiditionUpdateNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExpiditionUpdateNotify {
    const NAME: &'static str = "ExpiditionUpdateNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.expd_count = is.read_uint32()?;
                },
                114 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.infos.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.expd_count != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.expd_count);
        }
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.expd_count != 0 {
            os.write_uint32(8, self.expd_count)?;
        }
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(114)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExpiditionUpdateNotify {
        ExpiditionUpdateNotify::new()
    }

    fn clear(&mut self) {
        self.expd_count = 0;
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExpiditionUpdateNotify {
        static instance: ::protobuf::rt::Lazy<ExpiditionUpdateNotify> = ::protobuf::rt::Lazy::new();
        instance.get(ExpiditionUpdateNotify::new)
    }
}

impl ::protobuf::MessageFull for ExpiditionUpdateNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExpiditionUpdateNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExpiditionUpdateNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpiditionUpdateNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ExpeditionClaimNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExpeditionClaimNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ExpeditionClaimNotify.rewards)
    pub rewards: ::std::vec::Vec<RewardInfo>,
    // @@protoc_insertion_point(field:Mualani.Guide.ExpeditionClaimNotify.infos)
    pub infos: ::std::collections::HashMap<u64, ExpiditionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ExpeditionClaimNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExpeditionClaimNotify {
    fn default() -> &'a ExpeditionClaimNotify {
        <ExpeditionClaimNotify as ::protobuf::Message>::default_instance()
    }
}

impl ExpeditionClaimNotify {
    pub fn new() -> ExpeditionClaimNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rewards",
            |m: &ExpeditionClaimNotify| { &m.rewards },
            |m: &mut ExpeditionClaimNotify| { &mut m.rewards },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "infos",
            |m: &ExpeditionClaimNotify| { &m.infos },
            |m: &mut ExpeditionClaimNotify| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExpeditionClaimNotify>(
            "ExpeditionClaimNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExpeditionClaimNotify {
    const NAME: &'static str = "ExpeditionClaimNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.rewards.push(is.read_message()?);
                },
                114 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.infos.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rewards {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(114)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExpeditionClaimNotify {
        ExpeditionClaimNotify::new()
    }

    fn clear(&mut self) {
        self.rewards.clear();
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExpeditionClaimNotify {
        static instance: ::protobuf::rt::Lazy<ExpeditionClaimNotify> = ::protobuf::rt::Lazy::new();
        instance.get(ExpeditionClaimNotify::new)
    }
}

impl ::protobuf::MessageFull for ExpeditionClaimNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExpeditionClaimNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExpeditionClaimNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpeditionClaimNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Mualani.Guide.ExpiditionSendNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExpiditionSendNotify {
    // message fields
    // @@protoc_insertion_point(field:Mualani.Guide.ExpiditionSendNotify.infos)
    pub infos: ::std::collections::HashMap<u64, ExpiditionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:Mualani.Guide.ExpiditionSendNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExpiditionSendNotify {
    fn default() -> &'a ExpiditionSendNotify {
        <ExpiditionSendNotify as ::protobuf::Message>::default_instance()
    }
}

impl ExpiditionSendNotify {
    pub fn new() -> ExpiditionSendNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "infos",
            |m: &ExpiditionSendNotify| { &m.infos },
            |m: &mut ExpiditionSendNotify| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExpiditionSendNotify>(
            "ExpiditionSendNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExpiditionSendNotify {
    const NAME: &'static str = "ExpiditionSendNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.infos.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.infos {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExpiditionSendNotify {
        ExpiditionSendNotify::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExpiditionSendNotify {
        static instance: ::protobuf::rt::Lazy<ExpiditionSendNotify> = ::protobuf::rt::Lazy::new();
        instance.get(ExpiditionSendNotify::new)
    }
}

impl ::protobuf::MessageFull for ExpiditionSendNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExpiditionSendNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExpiditionSendNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpiditionSendNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Mualani.Guide.ExpiditionState)
pub enum ExpiditionState {
    // @@protoc_insertion_point(enum_value:Mualani.Guide.ExpiditionState.AVATAR_EXPEDITION_NONE)
    AVATAR_EXPEDITION_NONE = 0,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.ExpiditionState.AVATAR_EXPEDITION_DOING)
    AVATAR_EXPEDITION_DOING = 1,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.ExpiditionState.AVATAR_EXPEDITION_FINISH_WAIT_REWARD)
    AVATAR_EXPEDITION_FINISH_WAIT_REWARD = 2,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.ExpiditionState.AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD)
    AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD = 3,
    // @@protoc_insertion_point(enum_value:Mualani.Guide.ExpiditionState.AVATAR_EXPEDITION_LOCKED)
    AVATAR_EXPEDITION_LOCKED = 4,
}

impl ::protobuf::Enum for ExpiditionState {
    const NAME: &'static str = "ExpiditionState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExpiditionState> {
        match value {
            0 => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_NONE),
            1 => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_DOING),
            2 => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_FINISH_WAIT_REWARD),
            3 => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD),
            4 => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_LOCKED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ExpiditionState> {
        match str {
            "AVATAR_EXPEDITION_NONE" => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_NONE),
            "AVATAR_EXPEDITION_DOING" => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_DOING),
            "AVATAR_EXPEDITION_FINISH_WAIT_REWARD" => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_FINISH_WAIT_REWARD),
            "AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD" => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD),
            "AVATAR_EXPEDITION_LOCKED" => ::std::option::Option::Some(ExpiditionState::AVATAR_EXPEDITION_LOCKED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ExpiditionState] = &[
        ExpiditionState::AVATAR_EXPEDITION_NONE,
        ExpiditionState::AVATAR_EXPEDITION_DOING,
        ExpiditionState::AVATAR_EXPEDITION_FINISH_WAIT_REWARD,
        ExpiditionState::AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD,
        ExpiditionState::AVATAR_EXPEDITION_LOCKED,
    ];
}

impl ::protobuf::EnumFull for ExpiditionState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ExpiditionState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ExpiditionState {
    fn default() -> Self {
        ExpiditionState::AVATAR_EXPEDITION_NONE
    }
}

impl ExpiditionState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ExpiditionState>("ExpiditionState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16ExpiditionNotify.proto\x12\rMualani.Guide\"\xb3\x01\n\x0eExpiditio\
    nInfo\x124\n\x05state\x18\x01\x20\x01(\x0e2\x1e.Mualani.Guide.Expidition\
    StateR\x05state\x12\x15\n\x06exp_id\x18\x02\x20\x01(\rR\x05expId\x12\x1b\
    \n\thour_time\x18\x03\x20\x01(\rR\x08hourTime\x12\x1d\n\nstart_time\x18\
    \x04\x20\x01(\rR\tstartTime\x12\x18\n\x07shorten\x18\x05\x20\x01(\x02R\
    \x07shorten\":\n\nRewardInfo\x12\x16\n\x06itemid\x18\x01\x20\x01(\rR\x06\
    itemid\x12\x14\n\x05count\x18\x02\x20\x01(\rR\x05count\"\xd8\x01\n\x16Ex\
    piditionUpdateNotify\x12\x1d\n\nexpd_count\x18\x08\x20\x01(\rR\texpdCoun\
    t\x12F\n\x05infos\x18\x0e\x20\x03(\x0b20.Mualani.Guide.ExpiditionUpdateN\
    otify.InfosEntryR\x05infos\x1aW\n\nInfosEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\x04R\x03key\x123\n\x05value\x18\x02\x20\x01(\x0b2\x1d.Mualani.\
    Guide.ExpiditionInfoR\x05value:\x028\x01\"\xec\x01\n\x15ExpeditionClaimN\
    otify\x123\n\x07rewards\x18\x07\x20\x03(\x0b2\x19.Mualani.Guide.RewardIn\
    foR\x07rewards\x12E\n\x05infos\x18\x0e\x20\x03(\x0b2/.Mualani.Guide.Expe\
    ditionClaimNotify.InfosEntryR\x05infos\x1aW\n\nInfosEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\x04R\x03key\x123\n\x05value\x18\x02\x20\x01(\x0b2\
    \x1d.Mualani.Guide.ExpiditionInfoR\x05value:\x028\x01\"\xb5\x01\n\x14Exp\
    iditionSendNotify\x12D\n\x05infos\x18\x08\x20\x03(\x0b2..Mualani.Guide.E\
    xpiditionSendNotify.InfosEntryR\x05infos\x1aW\n\nInfosEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\x04R\x03key\x123\n\x05value\x18\x02\x20\x01(\
    \x0b2\x1d.Mualani.Guide.ExpiditionInfoR\x05value:\x028\x01*\xbe\x01\n\
    \x0fExpiditionState\x12\x1a\n\x16AVATAR_EXPEDITION_NONE\x10\0\x12\x1b\n\
    \x17AVATAR_EXPEDITION_DOING\x10\x01\x12(\n$AVATAR_EXPEDITION_FINISH_WAIT\
    _REWARD\x10\x02\x12*\n&AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD\x10\x03\
    \x12\x1c\n\x18AVATAR_EXPEDITION_LOCKED\x10\x04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ExpiditionInfo::generated_message_descriptor_data());
            messages.push(RewardInfo::generated_message_descriptor_data());
            messages.push(ExpiditionUpdateNotify::generated_message_descriptor_data());
            messages.push(ExpeditionClaimNotify::generated_message_descriptor_data());
            messages.push(ExpiditionSendNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ExpiditionState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
